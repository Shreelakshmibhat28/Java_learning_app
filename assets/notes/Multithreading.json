{
  "Multithreading in Java": {
    "Creating and Managing Threads": {
      "Introduction": {
        "Purpose": "Multithreading allows you to run multiple threads (smaller units of a process) concurrently, enhancing the performance and responsiveness of your Java applications.",
        "Example": {
          "Creating a Thread": {
            "Extending Thread Class": {
              "Definition": "You can create a thread by extending the 'Thread' class and overriding the 'run' method.",
              "Example": {
                "Thread Class Extension": "class MyThread extends Thread {\n  public void run() {\n    // Thread logic\n  }\n}\n\n// Create and start a thread\nMyThread thread = new MyThread();\nthread.start();"
              }
            },
            "Implementing Runnable Interface": {
              "Definition": "Alternatively, you can implement the 'Runnable' interface and provide a 'run' method.",
              "Example": {
                "Runnable Interface Implementation": "class MyRunnable implements Runnable {\n  public void run() {\n    // Thread logic\n  }\n}\n\n// Create a thread using the implemented Runnable\nThread thread = new Thread(new MyRunnable());\nthread.start();"
              }
            }
          }
        }
      },
      "Thread Synchronization": {
        "Purpose": "Thread synchronization is essential when multiple threads access shared resources to prevent data corruption or race conditions.",
        "Example": {
          "Using synchronized Method": {
            "Definition": "You can make a method synchronized to ensure that only one thread can execute it at a time.",
            "Example": {
              "Synchronized Method": "public synchronized void synchronizedMethod() {\n  // Thread-safe code\n}"
            }
          },
          "Using synchronized Block": {
            "Definition": "You can use synchronized blocks to lock specific sections of code to prevent concurrent access.",
            "Example": {
              "Synchronized Block": "synchronized (lockObject) {\n  // Thread-safe code\n}"
            }
          }
        }
      }
    },
    "Thread Safety": {
      "Purpose": "Thread safety ensures that data and resources accessed by multiple threads are protected from race conditions and inconsistencies.",
      "Example": {
        "Atomic Operations": {
          "Definition": "Atomic operations are operations that are executed as a single, uninterruptible unit.",
          "Example": {
            "Atomic Integer": "AtomicInteger counter = new AtomicInteger();\nint result = counter.incrementAndGet();"
          }
        },
        "Using Thread-Safe Collections": {
          "Definition": "Java provides thread-safe collections like 'ConcurrentHashMap' and 'CopyOnWriteArrayList' that can be used for concurrent access.",
          "Example": {
            "ConcurrentHashMap": "ConcurrentMap<String, Integer> map = new ConcurrentHashMap<>();\nmap.put(\"key\", 42);"
          }
        }
      }
    },
    "Concurrent Programming": {
      "Purpose": "Concurrent programming involves designing and implementing applications that efficiently handle multiple threads to achieve better performance.",
      "Example": {
        "Executor Framework": {
          "Definition": "The 'Executor' framework simplifies thread management and provides thread pools for executing tasks concurrently.",
          "Example": {
            "Executor Service": "ExecutorService executor = Executors.newFixedThreadPool(4);\nexecutor.submit(() -> {\n  // Task to be executed\n});\nexecutor.shutdown();"
          }
        },
        "Fork-Join Framework": {
          "Definition": "The Fork-Join framework is used for parallel programming by dividing a task into subtasks and merging the results.",
          "Example": {
            "RecursiveTask": "class MyTask extends RecursiveTask<Integer> {\n  protected Integer compute() {\n    // Divide and conquer logic\n  }\n}\n\nForkJoinPool pool = new ForkJoinPool();\nint result = pool.invoke(new MyTask());"
          }
        }
      }
    }
  }
}
